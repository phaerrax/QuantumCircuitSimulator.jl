function test_parse()
    circuit_str = """OPENQASM 2.0;
include "qelib1.inc";
qreg q[19];
x q[2];
x q[4];
x q[6];
x q[8];
x q[10];
x q[12];
x q[14];
x q[16];
x q[18];
rz(pi/2) q[0];
rz(pi/2) q[1];
rz(pi/2) q[3];
rz(pi/2) q[5];
rz(pi/2) q[7];
rz(pi/2) q[9];
rz(pi/2) q[11];
rz(pi/2) q[13];
rz(pi/2) q[15];
rz(pi/2) q[17];
rz(pi/2) q[2];
rz(pi/2) q[4];
rz(pi/2) q[6];
rz(pi/2) q[8];
rz(pi/2) q[10];
rz(pi/2) q[12];
rz(pi/2) q[14];
rz(pi/2) q[16];
rz(pi/2) q[18];
sx q[0];
sx q[1];
sx q[3];
sx q[5];
sx q[7];
sx q[9];
sx q[11];
sx q[13];
sx q[15];
sx q[17];
rz(pi/2) q[2];
rz(pi/2) q[4];
rz(pi/2) q[6];
rz(pi/2) q[8];
rz(pi/2) q[10];
rz(pi/2) q[12];
rz(pi/2) q[14];
rz(pi/2) q[16];
rz(pi/2) q[18];
rz(pi/2) q[0];
rz(pi/2) q[1];
rz(pi/2) q[3];
rz(pi/2) q[5];
rz(pi/2) q[7];
rz(pi/2) q[9];
rz(pi/2) q[11];
rz(pi/2) q[13];
rz(pi/2) q[15];
rz(pi/2) q[17];
sx q[2];
sx q[4];
sx q[6];
sx q[8];
sx q[10];
sx q[12];
sx q[14];
sx q[16];
sx q[18];
rz(-pi/2) q[1];
rz(-pi/2) q[3];
rz(-pi/2) q[5];
rz(-pi/2) q[7];
rz(-pi/2) q[9];
rz(-pi/2) q[11];
rz(-pi/2) q[13];
rz(-pi/2) q[15];
rz(-pi/2) q[17];
rz(pi/2) q[2];
rz(pi/2) q[4];
rz(pi/2) q[6];
rz(pi/2) q[8];
rz(pi/2) q[10];
rz(pi/2) q[12];
rz(pi/2) q[14];
rz(pi/2) q[16];
rz(pi/2) q[18];
rz(pi/2) q[1];
rz(pi/2) q[5];
rz(pi/2) q[9];
rz(pi/2) q[11];
rz(pi/2) q[2];
rz(pi/2) q[4];
rz(pi/2) q[6];
rz(pi/2) q[8];
rz(pi/2) q[10];
rz(pi/2) q[12];
rz(pi/2) q[14];
rz(pi/2) q[16];
rz(pi/2) q[18];
sx q[1];
sx q[5];
sx q[9];
sx q[11];
rz(-pi/2) q[2];
rz(-pi/2) q[6];
rz(-pi/2) q[10];
rz(-pi/2) q[12];
rz(-pi/2) q[1];
rz(-pi/2) q[5];
rz(-pi/2) q[9];
rz(-pi/2) q[11];
sx q[2];
sx q[6];
sx q[10];
sx q[12];
rz(pi/2) q[2];
rz(pi/2) q[6];
rz(pi/2) q[10];
rz(pi/2) q[12];
cx q[3],q[4];
cx q[7],q[8];
cx q[13],q[14];
cx q[15],q[16];
cx q[17],q[18];
cx q[2],q[1];
cx q[6],q[5];
cx q[10],q[9];
cx q[12],q[11];
rz(pi/2) q[11];
rz(pi/2) q[12];
rz(pi/2) q[9];
rz(pi/2) q[10];
rz(pi/2) q[5];
rz(pi/2) q[6];
rz(pi/2) q[1];
rz(pi/2) q[2];
x q[17];
x q[15];
x q[13];
x q[7];
x q[3];
sx q[11];
sx q[12];
sx q[9];
sx q[10];
sx q[5];
sx q[6];
sx q[1];
sx q[2];
rz(pi/2) q[11];
rz(pi/2) q[12];
rz(pi/2) q[9];
rz(pi/2) q[10];
rz(pi/2) q[5];
rz(pi/2) q[6];
rz(pi/2) q[1];
rz(pi/2) q[2];
x q[11];
x q[9];
x q[5];
x q[1];"""
    circ = quantumcircuit(OpenQASM.parse(circuit_str))
    # Depth has been calculated with `quantumcircuit` at the time this test function was
    # written. Ideally we should determine it with other means. If anything, this function
    # tests that the circuit gets actually parsed, that a QuantumCircuit object is returned,
    # and that the output (well, the circuit dimensions) have not changed over time as
    # a result of some change in the code.
    return depth(circ) == 14 && nqbits(circ) == 19
end
